'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Namespace InControlTestWebAPI

    Partial Public Class NORTHWNDEntities
        Inherits DbContext
    
        Public Sub New()
            MyBase.New("name=NORTHWNDEntities")
        End Sub
    
        Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
            Throw New UnintentionalCodeFirstException()
        End Sub
    
        Public Overridable Property Categories() As DbSet(Of Category)
        Public Overridable Property CustomerDemographics() As DbSet(Of CustomerDemographic)
        Public Overridable Property Customers() As DbSet(Of Customer)
        Public Overridable Property Employees() As DbSet(Of Employee)
        Public Overridable Property Order_Details() As DbSet(Of Order_Detail)
        Public Overridable Property Orders() As DbSet(Of Order)
        Public Overridable Property Products() As DbSet(Of Product)
        Public Overridable Property Regions() As DbSet(Of Region)
        Public Overridable Property Shippers() As DbSet(Of Shipper)
        Public Overridable Property Suppliers() As DbSet(Of Supplier)
        Public Overridable Property sysdiagrams() As DbSet(Of sysdiagram)
        Public Overridable Property Territories() As DbSet(Of Territory)
    
        Public Overridable Function CustOrderHist(customerID As String) As ObjectResult(Of CustOrderHist_Result)
            Dim customerIDParameter As ObjectParameter = If(customerID IsNot Nothing, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrderHist_Result)("CustOrderHist", customerIDParameter)
        End Function
    
        Public Overridable Function CustOrdersDetail(orderID As Nullable(Of Integer)) As ObjectResult(Of CustOrdersDetail_Result)
            Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrdersDetail_Result)("CustOrdersDetail", orderIDParameter)
        End Function
    
        Public Overridable Function CustOrdersOrders(customerID As String) As ObjectResult(Of CustOrdersOrders_Result)
            Dim customerIDParameter As ObjectParameter = If(customerID IsNot Nothing, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustOrdersOrders_Result)("CustOrdersOrders", customerIDParameter)
        End Function
    
        Public Overridable Function Employee_Sales_by_Country(beginning_Date As Nullable(Of Date), ending_Date As Nullable(Of Date)) As ObjectResult(Of Employee_Sales_by_Country_Result)
            Dim beginning_DateParameter As ObjectParameter = If(beginning_Date.HasValue, New ObjectParameter("Beginning_Date", beginning_Date), New ObjectParameter("Beginning_Date", GetType(Date)))
    
            Dim ending_DateParameter As ObjectParameter = If(ending_Date.HasValue, New ObjectParameter("Ending_Date", ending_Date), New ObjectParameter("Ending_Date", GetType(Date)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Employee_Sales_by_Country_Result)("Employee_Sales_by_Country", beginning_DateParameter, ending_DateParameter)
        End Function
    
        Public Overridable Function Sales_by_Year(beginning_Date As Nullable(Of Date), ending_Date As Nullable(Of Date)) As ObjectResult(Of Sales_by_Year_Result)
            Dim beginning_DateParameter As ObjectParameter = If(beginning_Date.HasValue, New ObjectParameter("Beginning_Date", beginning_Date), New ObjectParameter("Beginning_Date", GetType(Date)))
    
            Dim ending_DateParameter As ObjectParameter = If(ending_Date.HasValue, New ObjectParameter("Ending_Date", ending_Date), New ObjectParameter("Ending_Date", GetType(Date)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Sales_by_Year_Result)("Sales_by_Year", beginning_DateParameter, ending_DateParameter)
        End Function
    
        Public Overridable Function SalesByCategory(categoryName As String, ordYear As String) As ObjectResult(Of SalesByCategory_Result)
            Dim categoryNameParameter As ObjectParameter = If(categoryName IsNot Nothing, New ObjectParameter("CategoryName", categoryName), New ObjectParameter("CategoryName", GetType(String)))
    
            Dim ordYearParameter As ObjectParameter = If(ordYear IsNot Nothing, New ObjectParameter("OrdYear", ordYear), New ObjectParameter("OrdYear", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SalesByCategory_Result)("SalesByCategory", categoryNameParameter, ordYearParameter)
        End Function
    
        Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))
    
            Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
        End Function
    
        Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))
    
            Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
        End Function
    
        Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
        End Function
    
        Public Overridable Function SP_Suppliers_DeleteByPK(supplierID As Nullable(Of Integer)) As Integer
            Dim supplierIDParameter As ObjectParameter = If(supplierID.HasValue, New ObjectParameter("SupplierID", supplierID), New ObjectParameter("SupplierID", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Suppliers_DeleteByPK", supplierIDParameter)
        End Function
    
        Public Overridable Function SP_Suppliers_Insert(supplierID As ObjectParameter, companyName As String, contactName As String, contactTitle As String, address As String, city As String, region As String, postalCode As String, country As String, phone As String, fax As String, homePage As String) As Integer
            Dim companyNameParameter As ObjectParameter = If(companyName IsNot Nothing, New ObjectParameter("CompanyName", companyName), New ObjectParameter("CompanyName", GetType(String)))
    
            Dim contactNameParameter As ObjectParameter = If(contactName IsNot Nothing, New ObjectParameter("ContactName", contactName), New ObjectParameter("ContactName", GetType(String)))
    
            Dim contactTitleParameter As ObjectParameter = If(contactTitle IsNot Nothing, New ObjectParameter("ContactTitle", contactTitle), New ObjectParameter("ContactTitle", GetType(String)))
    
            Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))
    
            Dim cityParameter As ObjectParameter = If(city IsNot Nothing, New ObjectParameter("City", city), New ObjectParameter("City", GetType(String)))
    
            Dim regionParameter As ObjectParameter = If(region IsNot Nothing, New ObjectParameter("Region", region), New ObjectParameter("Region", GetType(String)))
    
            Dim postalCodeParameter As ObjectParameter = If(postalCode IsNot Nothing, New ObjectParameter("PostalCode", postalCode), New ObjectParameter("PostalCode", GetType(String)))
    
            Dim countryParameter As ObjectParameter = If(country IsNot Nothing, New ObjectParameter("Country", country), New ObjectParameter("Country", GetType(String)))
    
            Dim phoneParameter As ObjectParameter = If(phone IsNot Nothing, New ObjectParameter("Phone", phone), New ObjectParameter("Phone", GetType(String)))
    
            Dim faxParameter As ObjectParameter = If(fax IsNot Nothing, New ObjectParameter("Fax", fax), New ObjectParameter("Fax", GetType(String)))
    
            Dim homePageParameter As ObjectParameter = If(homePage IsNot Nothing, New ObjectParameter("HomePage", homePage), New ObjectParameter("HomePage", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Suppliers_Insert", supplierID, companyNameParameter, contactNameParameter, contactTitleParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, phoneParameter, faxParameter, homePageParameter)
        End Function
    
        Public Overridable Function SP_Suppliers_UpdateByPK(supplierID As Nullable(Of Integer), companyName As String, contactName As String, contactTitle As String, address As String, city As String, region As String, postalCode As String, country As String, phone As String, fax As String, homePage As String) As Integer
            Dim supplierIDParameter As ObjectParameter = If(supplierID.HasValue, New ObjectParameter("SupplierID", supplierID), New ObjectParameter("SupplierID", GetType(Integer)))
    
            Dim companyNameParameter As ObjectParameter = If(companyName IsNot Nothing, New ObjectParameter("CompanyName", companyName), New ObjectParameter("CompanyName", GetType(String)))
    
            Dim contactNameParameter As ObjectParameter = If(contactName IsNot Nothing, New ObjectParameter("ContactName", contactName), New ObjectParameter("ContactName", GetType(String)))
    
            Dim contactTitleParameter As ObjectParameter = If(contactTitle IsNot Nothing, New ObjectParameter("ContactTitle", contactTitle), New ObjectParameter("ContactTitle", GetType(String)))
    
            Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))
    
            Dim cityParameter As ObjectParameter = If(city IsNot Nothing, New ObjectParameter("City", city), New ObjectParameter("City", GetType(String)))
    
            Dim regionParameter As ObjectParameter = If(region IsNot Nothing, New ObjectParameter("Region", region), New ObjectParameter("Region", GetType(String)))
    
            Dim postalCodeParameter As ObjectParameter = If(postalCode IsNot Nothing, New ObjectParameter("PostalCode", postalCode), New ObjectParameter("PostalCode", GetType(String)))
    
            Dim countryParameter As ObjectParameter = If(country IsNot Nothing, New ObjectParameter("Country", country), New ObjectParameter("Country", GetType(String)))
    
            Dim phoneParameter As ObjectParameter = If(phone IsNot Nothing, New ObjectParameter("Phone", phone), New ObjectParameter("Phone", GetType(String)))
    
            Dim faxParameter As ObjectParameter = If(fax IsNot Nothing, New ObjectParameter("Fax", fax), New ObjectParameter("Fax", GetType(String)))
    
            Dim homePageParameter As ObjectParameter = If(homePage IsNot Nothing, New ObjectParameter("HomePage", homePage), New ObjectParameter("HomePage", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_Suppliers_UpdateByPK", supplierIDParameter, companyNameParameter, contactNameParameter, contactTitleParameter, addressParameter, cityParameter, regionParameter, postalCodeParameter, countryParameter, phoneParameter, faxParameter, homePageParameter)
        End Function
    
        Public Overridable Function sp_upgraddiagrams() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
        End Function
    
        Public Overridable Function Ten_Most_Expensive_Products() As ObjectResult(Of Ten_Most_Expensive_Products_Result)
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Ten_Most_Expensive_Products_Result)("Ten_Most_Expensive_Products")
        End Function
    
    End Class

End Namespace
